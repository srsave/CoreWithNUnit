@model CoreWithNUnit.ViewModels.AddViewModel

@{
    ViewData["Title"] = "Add";
}

<h2 style="background-color:darkgray; color:white; padding:inherit"   >AWS Asp.Net Core Example (Using DevOps)</h2>
<h2>Add Test</h2>

<h4>Addition of 2 Numbers</h4>
<hr />
<div class="row">
    <div class="col-md-4" style="vertical-align:central">
        <form asp-action="Add">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="Num1" class="control-label"></label>
                <input asp-for="Num1" class="form-control" />
                <span asp-validation-for="Num1" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Num2" class="control-label"></label>
                <input asp-for="Num2" class="form-control" />
                <span asp-validation-for="Num2" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" name="Add1" value="Add" class="btn btn-default" asp-action="Add1" />
            </div>
            <div class="form-group">
                <label label class="control-label">Total :</label>
                @if (Model != null)
                {
                    <label id="Total" label class="control-label">@Model.Total </label>
                    <label id="lblmsg" label style="color:red;" class="control-label">@Model.lblmsg </label>
                }
                else
                {
                    <label id="Total" label class="control-label"></label>
                    <label id="lblmsg" label style="color:red;" class="control-label"></label>
                }

            </div>


        </form>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
